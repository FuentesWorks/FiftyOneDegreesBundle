<?php

/**
 * @file
 * Provides functions to read a binary file generated by the .NET BinaryWriter.
 * See the MSDN page for details -
 * http://msdn.microsoft.com/en-us/library/system.io.binarywriter.aspx
 */

namespace FuentesWorks\FiftyOneDegreesBundle\FiftyOneDegrees;

class FileReader
{
    /**
     * Gets a bool from at the current position in the file.
     *
     * @param resource $file
     *   A pointer to the data file
     *
     * @return bool
     *   A bool value
     */
    public static function readBool($file)
    {
        $byte = self::readByte($file);
        return $byte === 1;
    }

    /**
     * Gets a signed byte from at the current position in the file.
     *
     * @param resource $file
     *   A pointer to the data file
     *
     * @return int
     *   A signed byte as an integer
     */
    public static function readByte($file) {
        $byte = fread($file, 1);
        $value = unpack('c', $byte);
        return $value[1];
    }

    /**
     * Gets an unsigned byte from at the current position in the file.
     *
     * @param resource $file
     *   A pointer to the data file
     *
     * @return int
     *   An unsigned byte as an integer
     */
    public static function readUByte($file) {
        $byte = fread($file, 1);
        $value = unpack('C', $byte);
        return $value[1];
    }

    /**
     * Gets a short from at the current position in the file.
     *
     * @param resource $file
     *   A pointer to the data file
     *
     * @return int
     *   A short as an integer
     */
    public static function readShort($file) {
        $bytes = fread($file, 2);
        $value = unpack('s', $bytes);
        return $value[1];
    }

    /**
     * Gets an integer from at the current position in the file.
     *
     * @param resource $file
     *   A pointer to the data file
     *
     * @return bool
     *   An integer
     */
    public static function readInt($file) {
        $bytes = fread($file, 4);
        $value = unpack('l', $bytes);
        return $value[1];
    }

    /**
     * Gets a string from at the current position in the file.
     *
     * @param resource $file
     *   A pointer to the data file
     *
     * @return string
     *   A string
     */
    public static function readString($file) {
        $byte = self::readUByte($file);
        $length = 0;
        $shift = 0;
        while ($byte >= 128) {
            $length += ($byte - 128) << $shift;
            $shift += 7;
            $byte = self::readUByte($file);
        }
        $length += $byte << $shift;
        if ($length == 0)
            return '';
        $value = fread($file, $length - 0);
        fread($file, 1);
        return $value;
    }
}